name: deploy container
on:
  # Can be manually triggered
  workflow_dispatch: {}
  # Trigger a deploy every time there is a merge to main
  push:
    branches:
      - main

env:
  # Set this to your AWS region, e.g. us-east-1
  AWS_REGION: ${{ secrets.AWS_REGION }}
  # Set this to the URI of your ECR repo
  NEWS_ECR_REPO_URI: ${{ secrets.NEWS_ECR_REPO_URI }}
  INDICIES_ECR_REPO_URI: ${{ secrets.INDICIES_ECR_REPO_URI }}
  # Set this to the AWS role Github Actions will assume
  AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
  NEWS_ECS_SERVICE: polygon-news_ingest # name of the service
  NEWS_ECS_CLUSTER: polygon-news_ingest # name of the cluster
  NEWS_ECS_TASK_DEFINITION: .aws/news-task-definition.json # path of the JSON task definition
  CONTAINER_NAME: "app" # name of the container name in the task definition
jobs:
  deploy_to_ecs:
    runs-on: ubuntu-latest
    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code repository in agent
        uses: actions/checkout@v4
        with:
          set-safe-directory: true

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: News - Build, tag, and push image to Amazon ECR
        id: build-news-image
        working-directory: ./01_extract_load/news
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          echo "Target repo: ${NEWS_ECR_REPO_URI}:${IMAGE_TAG}"
          docker build -t ${NEWS_ECR_REPO_URI}:${IMAGE_TAG} .
          docker push ${NEWS_ECR_REPO_URI}:${IMAGE_TAG}
          echo "image=${NEWS_ECR_REPO_URI}:${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: build-news-image-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.NEWS_ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-news-image.outputs.image }}

      - name: Tag image in task definition
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          jq --arg IMAGE_TAG "${{ env.IMAGE_TAG }}" '.containerDefinitions[0].image |= "\($IMAGE_TAG)"' ${{ env.NEWS_ECS_TASK_DEFINITION }} > temp.json && mv temp.json ${{ env.NEWS_ECS_TASK_DEFINITION }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.build-news-image-task-def.outputs.task-definition }}
          service: ${{ env.NEWS_ECS_SERVICE }}
          cluster: ${{ env.NEWS_ECS_CLUSTER }}
          wait-for-service-stability: true
